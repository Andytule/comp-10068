// <auto-generated />
using System;
using Advanced_.NET_Assignment_3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Advanced_.NET_Assignment_3.Migrations
{
    [DbContext(typeof(Advanced_NET_Assignment_3Context))]
    [Migration("20220313224621_patients")]
    partial class patients
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Advanced_.NET_Assignment_3.Models.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Entity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Entity");
                });

            modelBuilder.Entity("Advanced_.NET_Assignment_3.Models.Immunization", b =>
                {
                    b.HasBaseType("Advanced_.NET_Assignment_3.Models.Entity");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LotNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("TradeName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTimeOffset>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasDiscriminator().HasValue("Immunization");
                });

            modelBuilder.Entity("Advanced_.NET_Assignment_3.Models.Person", b =>
                {
                    b.HasBaseType("Advanced_.NET_Assignment_3.Models.Entity");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("Advanced_.NET_Assignment_3.Models.Patient", b =>
                {
                    b.HasBaseType("Advanced_.NET_Assignment_3.Models.Person");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("Advanced_.NET_Assignment_3.Models.Provider", b =>
                {
                    b.HasBaseType("Advanced_.NET_Assignment_3.Models.Person");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LicenseNumber")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("Provider");
                });
#pragma warning restore 612, 618
        }
    }
}
